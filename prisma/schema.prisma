// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_URL")
}

model Community {
  id          String @id @default(cuid())
  title       String @unique
  description String
  img         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCount Int @default(1)

  users User[]
  post  Post[]
}

model Post {
  id     String  @id @default(cuid())
  title  String
  text   String  @db.Text
  image  String
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: SetNull)

  likes         Like[]
  likesValue    Int        @default(0)
  commentsCount Int        @default(0)
  comments      Comment[]
  communityId   String?
  community     Community? @relation(fields: [communityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     String @id @default(cuid())
  text   String @db.Text
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  mainCommentId    String?
  mainComment      Comment?  @relation("CommentsChain", fields: [mainCommentId], references: [id])
  childrenComments Comment[] @relation("CommentsChain")
  childrenCount    Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  isPositive Boolean?
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@id([postId, userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String // I hope that any user have a name
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  communities Community[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url = env("DATABASE_URL")
}

model Tag {
    id        String   @id @default(cuid())
    title     String   @unique
    post      Post[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id            String    @id @default(cuid())
    title         String
    text          String    @db.Text
    img           String    @db.Text
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: SetNull)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    likes         Like[]
    likesValue    Int       @default(0)
    commentsCount Int       @default(0)
    comments      Comment[]
    tag           Tag[]
}

model Comment {
    id        String   @id @default(cuid())
    text      String   @db.Text
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Like {
    isPositive Boolean?
    post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    @@id([postId, userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    likes         Like[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
